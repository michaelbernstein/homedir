#!/usr/bin/env python

import optparse
import os
import shutil
import subprocess
import sys

__linux_root = os.path.expanduser('~/src/rockhopper')
__build_root = os.path.join(__linux_root, 'build')
__meatfile = '.lastmeat'

def __find_toplevel():
    git = subprocess.Popen("git rev-parse --show-toplevel", shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    toplevel, _ = git.communicate()
    return toplevel.strip()

def __find_meat(toplevel):
    if not toplevel:
        return None
    meat = None
    meatfile = os.path.join(toplevel, __meatfile)
    if os.path.exists(meatfile):
        meat = file(meatfile).read()
    return meat

def __find_target(toplevel):
    rval = 'unknown'
    if toplevel:
        rval = os.path.split(toplevel)[1]
    return rval

def linux_build(toplevel, meat, force_reconfig=False, force_rebuild=False):
    git = subprocess.Popen("git status | grep 'On branch' | cut -d' ' -f4",
        shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    branch, _ = git.communicate()
    branch = branch.strip().replace('/', '_')
    if not branch:
        if git.returncode:
            raise Exception, 'Could not determine git branch!'
        branch = 'onetime'

    target = __find_target(toplevel)
    targetroot = os.path.join(__build_root, target)
    branchroot = os.path.join(targetroot, branch)
    buildroot = os.path.join(branchroot, meat)

    if not os.path.exists(targetroot):
        os.mkdir(targetroot)

    if not os.path.exists(branchroot):
        os.mkdir(branchroot)

    if branch == 'onetime':
        try:
            shutil.rmtree(buildroot)
        except:
            pass

    if os.path.exists(buildroot) and force_rebuild:
        print "=================================================="
        print "make mrproper O=%s" % buildroot
        print "=================================================="
        os.system("make mrproper O=%s" % buildroot)
        print ""
        force_reconfig = True
    elif not os.path.exists(buildroot):
        os.mkdir(buildroot)
        force_reconfig = True

    if force_reconfig:
        print "=================================================="
        print "cp %s/arch/arm/configs/%s_defconfig %s/.config" % (toplevel, meat, buildroot)
        print "=================================================="
        os.system("cp %s/arch/arm/configs/%s_defconfig %s/.config" % (toplevel, meat, buildroot))
        print ""
        print "=================================================="
        print "make oldconfig O=%s" % buildroot
        print "=================================================="
        os.system("make oldconfig O=%s" % buildroot)
        print ""

    print "=================================================="
    print "make uImage O=%s" % buildroot
    print "=================================================="
    os.system("make uImage O=%s" % buildroot)

if __name__ == '__main__':
    if os.uname()[0] != 'Linux':
        print "This must be run on linux!"
        sys.exit(1)

    parser = optparse.OptionParser()
    parser.add_option('-f', '--force', dest='force', help='force rebuild',
        default=False, action='store_true')
    parser.add_option('-c', '--config', dest='config', help='force reconfig',
        default=False, action='store_true')

    opts, args = parser.parse_args()
    meat = None
    toplevel = __find_toplevel()

    if not toplevel:
        print "Can't find top of git repo!"
        sys.exit(1)

    if not args:
        meat = __find_meat(toplevel)
        if not meat:
            print 'Need a defconfig to build!'
            sys.exit(1)
    else:
        meat = args[0]
        with file(os.path.join(toplevel, __meatfile), 'w') as f:
            f.write(meat)

    try:
        linux_build(toplevel, meat, opts.config, opts.force)
    except Exception, e:
        print str(e)
        sys.exit(1)

    sys.exit(0)
