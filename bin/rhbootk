#!/usr/bin/env python

import optparse
import os
import subprocess
import sys

__linux_root = '/home/hurley/src/rockhopper'
__uimage = os.path.join(__linux_root, 'build/%s/%s/%s/arch/arm/boot/uImage')
__meatfile = '.lastmeat'

def __find_toplevel():
    git = subprocess.Popen("git rev-parse --show-toplevel", shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    toplevel, _ = git.communicate()
    return toplevel.strip()

def __find_meat(toplevel):
    if not toplevel:
        return None
    meat = None
    meatfile = os.path.join(toplevel, __meatfile)
    if os.path.exists(meatfile):
        meat = file(meatfile).read()
    return meat

def __find_target(toplevel):
    rval = 'unknown'
    if toplevel:
        rval = os.path.split(toplevel)[1]
    return rval

def linux_bootk(toplevel, meat):
    git = subprocess.Popen("git status | grep 'On branch' | cut -d' ' -f4",
        shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    branch, _ = git.communicate()
    branch = branch.strip().replace('/', '_')
    if not branch:
        if git.returncode:
            raise Exception, 'Could not determine git branch!'
        branch = 'onetime'

    target = __find_target(toplevel)
    uimage = __uimage % (target, branch, meat)

    if not os.path.exists(uimage):
        raise Exception, 'uImage %s does not appear to exist!' % uimage

    cmd = 'novacom boot mem:// < %s' % uimage
    print cmd
    os.system(cmd)

if __name__ == '__main__':
    parser = optparse.OptionParser()

    opts, args = parser.parse_args()
    meat = None
    toplevel = __find_toplevel()

    if not toplevel:
        print "Can't find top of git repo!"
        sys.exit(1)

    if not args:
        meat = __find_meat(toplevel)
        if not meat:
            print 'Need a defconfig to load!'
            sys.exit(1)
    else:
        meat = args[0]

    try:
        linux_bootk(toplevel, meat)
    except Exception, e:
        print str(e)
        sys.exit(1)

    sys.exit(0)
