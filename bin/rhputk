#!/usr/bin/env python

import optparse
import os
import subprocess
import sys

__linux_root = os.path.expanduser('~/src/rockhopper')
__uimage = os.path.join(__linux_root, 'build/%s/%s/%s/arch/arm/boot/uImage')
__meatfile = '.lastmeat'
__branchfile = '.lastbranch'

def __find_toplevel():
    git = subprocess.Popen("git rev-parse --show-toplevel", shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    toplevel, _ = git.communicate()
    return toplevel.strip()

def __find_branch(toplevel):
    if not toplevel:
        return None
    branch = None
    branchfile = os.path.join(toplevel, __branchfile)
    if os.path.exists(branchfile):
        branch = file(branchfile).read()
    return branch

def __find_meat(toplevel):
    if not toplevel:
        return None
    meat = None
    meatfile = os.path.join(toplevel, __meatfile)
    if os.path.exists(meatfile):
        meat = file(meatfile).read()
    return meat

def __find_target(toplevel):
    rval = 'unknown'
    if toplevel:
        rval = os.path.split(toplevel)[1]
    return rval

def linux_putk(target, meat, branch, filename='/boot/uImage'):
    uimage = __uimage % (target, branch, meat)
    if not os.path.exists(uimage):
        raise Exception, 'uImage %s does not appear to exist!' % uimage

    cmd = 'novacom put file://%s < %s' % (filename, uimage)
    print cmd
    os.system(cmd)

if __name__ == '__main__':
    if os.uname()[0] != 'Linux':
        print "This must be run on linux!"
        sys.exit(1)

    parser = optparse.OptionParser()
    parser.add_option('-f', '--file', dest='file', default='/boot/uImage',
        help=' filename to put kernel image in (defaults to /boot/uImage)')
    parser.add_option('-b', '--branch', dest='branch', help='boot from branch',
        default='')
    parser.add_option('-m', '--meat', dest='meat', help='boot for meat',
        default='')

    opts, args = parser.parse_args()
    meat = None
    branch = None
    toplevel = __find_toplevel()

    if not toplevel:
        print "Can't find top of git repo!"
        sys.exit(1)

    target = __find_target(toplevel)

    if not opts.meat:
        meat = __find_meat(toplevel)
        if not meat:
            print 'Need a defconfig to load!'
            sys.exit(1)
    else:
        meat = opts.meat

    if not opts.branch:
        branch = __find_branch(toplevel)
        if not branch:
            print 'Need to know what branch to boot from!'
            sys.exit(1)
    else:
        branch = opts.branch

    try:
        linux_putk(target, meat, branch, opts.file)
    except Exception, e:
        print str(e)
        sys.exit(1)

    sys.exit(0)
