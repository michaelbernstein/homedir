" Set up pathogen
set nocompatible
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
filetype on
filetype plugin on
filetype indent on

set visualbell
set textwidth=0
set showmatch
set showmode
set showcmd
set ignorecase
set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set softtabstop=4
set modeline

set smartcase
set hidden
set history=1000
set scrolloff=2
set incsearch
set hlsearch
set ttyfast

set mouse=a

" see :help smartindent for inoremap details
set smartindent
set smarttab
set expandtab

" turn off annoying X-window title renaming
" handle window crap
set notitle
set ruler
set laststatus=2
set nobackup
set writebackup

" Want the current line hilighted
set cursorline

" Better filename completion (more like the shell)
set wildmode=longest:list
set wildmenu

set directory^=~/.vimswap//

" Config for supertab completion and clang autocomplete
set completeopt=menu,menuone,longest
set pumheight=15
let g:SuperTabMappingForward='<C-S-tab>'
let g:SuperTabDefaultCompletionType="context"
let g:clang_complete_auto=0
let g:clang_complete_copen=1

" Some configuration for omnicompletion
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
"inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
"inoremap <expr> <Nul> "\<C-x>\<C-o>\<C-n>\<C-p>"

" xml-plugin opts before ftplugins turned on
let xml_use_html = 1

au!
syntax on
au BufNewFile,BufRead **/mozilla-central*/*.cpp,**/mozilla-central*/*.h set ft=mozilla-c
au BufNewFile,BufRead **/mozilla-central*/*.js set ft=mozilla-js
au BufNewFile,BufRead *.pyx,*.pxd set ft=pyrex
au FileType javascript so $HOME/.vim/js.vim
au FileType c so $HOME/.vim/c.vim
au FileType cpp so $HOME/.vim/cpp.vim
au FileType mozilla-c so $HOME/.vim/mozilla.vim
au FileType mozilla-js so $HOME/.vim/mozilla_js.vim
au FileType makefile so $HOME/.vim/Make.vim
au FileType sql so $HOME/.vim/sql.vim
au FileType python so $HOME/.vim/python.vim
au FileType pyrex so $HOME/.vim/pyrex.vim
au FileType text so $HOME/.vim/txt.vim
au FileType vim so $HOME/.vim/vim.vim

" according to smartindent help, this makes comments align as i wish
inoremap # X#

inoremap jj <Esc>

nmap <C-k> :bp<CR>
nmap <C-j> :bn<CR>

let mapleader = ","
nmap <leader>e :edit <C-R>=getcwd() . "/"<CR>
nmap <leader>s :CtrlP<CR>
nmap <leader>f :LustyFilesystemExplorerFromHere<CR>
nmap <leader>b :LustyBufferExplorer<CR>
nmap <leader>j :LustyJuggler<CR>

" http://www.vim.org/tips/tip.php?tip_id=94
set tags=tags;/,~/src/*/tags

" Make terminal colors things I like
hi Comment ctermfg=Cyan
hi PreProc ctermfg=Cyan
hi Statement ctermfg=Yellow
hi Type ctermfg=40
hi Constant ctermfg=200 cterm=NONE
hi LineTooLong cterm=underline term=underline
hi TrailingWhitespace ctermbg=red term=underline
hi CursorLine term=bold cterm=NONE ctermbg=233
hi vimOption ctermfg=Blue
hi Search NONE
hi Search term=reverse cterm=reverse
hi Pmenu ctermbg=20
hi PmenuSel ctermbg=165
let python_highlight_all = 1

" Have the status line show the filename, whether or not it's modified,
" read-only, a help buffer, and type on the left. Show line number, column
" number, and percentage through file on right
set statusline=%F%m%r%h%y%=%l,%v\ [%p%%]

" Setup hilighting for certain line conditions
au FileType javascript,c,cpp,makefile,sql,python,vim let w:m1=matchadd('LineTooLong', '\%>80v.\+', -1)
au FileType javascript,c,cpp,makefile,sql,python,vim let w:m2=matchadd('TrailingWhitespace', '\s\+\%#\@<!$', -1)

" Make editing in command-line mode simpler for me - emacs-style
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <C-D> <Del>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>

" Enable nproject
let g:NProjectEnableHooks = 1
let g:NProjectDoChdir = 0

" Easy way to clear hilight from search
nnoremap <leader><space> :noh<CR>

" Easy way to ack for things
nnoremap <leader><C-]> :Ack! <C-R><C-W><CR>
nnoremap <C-]> :Ack! <C-R><C-W><CR>

" Set up ConqueTerm
let g:ConqueTerm_TERM = 'xterm-256color'
let g:ConqueTerm_CloseOnEnd = 1

" Set up CtrlP
let g:ctrlp_use_caching = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_persistence_input = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_lscommand = "ack --noenv --skipped --text -f"

" Bring in machine-local customizations
if filereadable(glob("~/.vimrc.local"))
    so ~/.vimrc.local
endif
