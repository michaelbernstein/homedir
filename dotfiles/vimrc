set visualbell
set textwidth=1000 "should be 79
set showmatch
set showmode
set ignorecase
set backspace=2
set tabstop=4
set shiftwidth=4
set softtabstop=4
set modeline

set smartcase
set hidden
set history=1000
set scrolloff=2
set incsearch
set hlsearch

set mouse=a

" see :help smartindent for inoremap details
set smartindent
set smarttab
set expandtab

" turn off annoying X-window title renaming
" handle window crap
set notitle
set ruler
set laststatus=2
set autochdir
set nobackup
set writebackup

" Want the current line hilighted
set cursorline

" Some configuration for omnicompletion
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <Nul> "\<C-x>\<C-o>\<C-n>\<C-p>"

" xml-plugin opts before ftplugins turned on
let xml_use_html = 1

filetype plugin on

autocmd!
syntax on
autocmd BufNewFile,BufRead *.js			so $HOME/.vim/javascript.vim|set list listchars=tab:>>
autocmd BufNewFile,BufRead *.c,*.h		so $HOME/.vim/c.vim|set nolist
autocmd BufNewFile,BufRead *.cpp        so $HOME/.vim/cpp.vim|set nolist
"autocmd BufNewFile,BufRead *rockhopper*/*.c,*rockhopper*/*.h,*nvkernel*/*.c,*nvkernel*/*.h		so $HOME/.vim/c_linux.vim|set nolist
autocmd BufNewFile,BufRead *.lsp,*.lisp		so $VIMRUNTIME/syntax/lisp.vim|set nolist
autocmd BufNewFile,BufRead *.lsp,*.lisp		so $HOME/.vim/lsp.vim|set nolist
autocmd BufNewFile,BufRead Make*,make*		so $HOME/.vim/Make.vim|set nolist
autocmd BufNewFile,BufRead mutt*,*letter*	so $HOME/.vim/mail.vim|set nolist
autocmd BufNewFile,BufRead *.rsc,*.rcp		so $VIMRUNTIME/syntax/rc.vim
autocmd BufNewFile,BufRead *.*sql*,*.dump	so $HOME/.vim/sql.vim|set nolist
autocmd BufNewFile,BufRead *.*sql*,*.dump	so $VIMRUNTIME/syntax/sql.vim|set nolist
autocmd BufNewFile,BufRead *.php,*.inc		so $VIMRUNTIME/syntax/php.vim|set nolist
autocmd BufNewFile,BufRead *.php,*.inc		so $HOME/.vim/php.vim|set nolist
autocmd BufNewFile,BufRead *.pl,*.perl		so $HOME/.vim/perl.vim|set nolist
autocmd BufNewFile,BufRead *.py,SConstruct	so $HOME/.vim/python.vim|set list listchars=tab:>>
autocmd BufNewFile,BufRead *.pyx,*.pxd		so $HOME/.vim/pyrex.vim|set list listchars=tab:>>

" according to smartindent help, this makes comments align as i wish
inoremap # X#

map <C-k> :tabp<CR>
map <C-j> :tabn<CR>
map ,e :tabnew <C-R>=expand("%:p:h") . "/"<CR>

" http://www.vim.org/tips/tip.php?tip_id=94
set tags=tags;/,~/src/*/tags

" CTL-left does close
map O5D :fold

" CTL-right does open
map O5C :foldopen!

" set foldmethod=manual

" Make colors mesh with gvime and other things I like
hi Comment ctermfg=Cyan
hi PreProc ctermfg=Cyan
hi Statement ctermfg=Yellow
hi Type ctermfg=40
hi Constant ctermfg=200 cterm=NONE
hi LineTooLong cterm=underline term=underline
hi TrailingWhitespace ctermbg=red term=underline
hi CursorLine term=bold cterm=NONE ctermbg=233
hi vimOption ctermfg=Blue
hi Search NONE
hi Search term=reverse cterm=reverse
hi Pmenu ctermbg=20
hi PmenuSel ctermbg=165
let python_highlight_all = 1

" Have the status line show the filename, whether or not it's modified,
" read-only, a help buffer, and type on the left. Show line number, column
" number, and percentage through file on right
set statusline=%F%m%r%h%y%=%l,%v\ [%p%%]

" Setup hilighting for certain line conditions
au BufWinEnter * let w:m1=matchadd('LineTooLong', '\%>80v.\+', -1)
au BufWinEnter * let w:m2=matchadd('TrailingWhitespace', '\s\+\%#\@<!$', -1)

" General settings for miniBufExplorer (gvim overrides some of these)
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 100

" Setup NERDTree and Taglist
nnoremap <silent> <F6> :NERDTreeToggle<CR>
nnoremap <silent> <F5> :TlistToggle<CR>

let NERDTreeWinSize = 45

let Tlist_WinWidth = 45
let Tlist_File_Fold_Auto_Close = 1

" Make editing in command-line mode simpler for me - emacs-style
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>
cnoremap <C-D> <Del>
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>

" Setup some project-like stuff
"
"let g:NwhProjDefault = [['<none>', '/']]
"let g:NwhProjs = g:NwhProjDefault
"
"function! g:NwhSetupProj()
" Loop through g:NwhProjs, find one that has a directory that is a parent of
" cwd, and set t:ProjCwd and t:ProjName appropriately. If nothing matches, set
" t:ProjName to <none>
"endfunction
"
"function! g:NwhOnTabEnter()
"  if !exists('t:ProjName')
"    call g:NwhSetupProj()
"  end
"
"  if match(t:ProjName, '<none>') != 0
"    let t:OldCwd = getcwd()
"    exec 'cd ' . t:ProjCwd
"    if exists('t:ProjVim')
"      exec 'so ' . t:ProjVim
"    end
"  end
"endfunction
"
"function! g:NwhOnTabLeave()
"  if exists('t:OldCwd')
"    exec 'cd ' . t:OldCwd
"  end
"endfunction
"
"function! g:NwhReadProjFile()
"  if filereadable(expand(g:NwhProjFile))
"    return readfile(expand(g:NwhProjFile))
"  else
"    return []
"  end
"endfunction
"
"function! g:NwhProjAdd(name, dir)
"  let item = [a:name . '|' . a:dir]
"  let cur = g:NwhReadProjFile()
"  if len(cur)
"    let lines = cur + item
"  else
"    let lines = item
"  end
"  call writefile(lines, expand(g:NwhProjFile))
"endfunction
"
"function! g:NwhProjLoad()
"  let g:NwhProjs = []
"  let projs = g:NwhReadProjFile()
"  for line in projs
"    let pname = split(line, '|')[0]
"    let pdir = split(line, '|')[1]
"    let g:NwhProjs = g:NwhProjs + [[pname, pdir]]
"  endfor
"  let g:NwhProjs = g:NwhProjs + g:NwhProjDefault
"endfunction
"
"au TabEnter * silent call g:NwhOnTabEnter()
"au TabLeave * silent call g:NwhOnTabLeave()
